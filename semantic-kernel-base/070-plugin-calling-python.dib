#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

#r "nuget: Microsoft.Extensions.Logging"
#r "nuget: Microsoft.SemanticKernel"
#r "nuget: Microsoft.Extensions.Logging.Console"
#r "nuget: Microsoft.Extensions.Logging.Debug"
#r "nuget: Microsoft.Extensions.Http"
#r "nuget: Microsoft.SemanticKernel.PromptTemplates.Handlebars"

#!import ../dotenv.cs
#!import ../pythonWrapper.cs
#!import ../commonFullDi.cs
#!import ../pythonWrapper.cs
#!import plugins/AudioVideoPlugin/AudioVideo.cs

#!markdown

### Calling python from C#

To call python from C# you can simply use the `PythonWrapper` class that in turn simply using the basic Process object to invoke python as command line, intercepting the output.

You can simply use a virtual environment where you previously installed all you need to execute your code (**pip**)

#!csharp

var kernelBuilder = Common.ConfigureKernelBuilder(enableLogging: true, enableDumpProvider: true);

var audioVideoPluginConfig = new AudioVideoPluginConfig("setting");
Common.Services.AddSingleton(audioVideoPluginConfig);  

// now install python wrapper
PythonWrapper wrapper = new ("/Users/gianmariaricci/develop/github/ai-playground/src/python/langchainVarious/langchain/bin/python3");
kernelBuilder.Services.AddSingleton(wrapper);

kernelBuilder
    .Plugins
        .AddFromType<AudioVideoPlugin>("AudioVideoPlugin");

#!csharp

var kernel = Common.Resolve<Kernel>();

#!markdown

Now we can simply let the kernel resolve complex task, that involves calling **multiple time various plugin until the task of the user is not resolved**. 

#!csharp

using Microsoft.SemanticKernel.Connectors.OpenAI;

var videoFile = "/Users/gianmariaricci/Downloads/Untitled.mp4";

// Now you can call directly with the prompt
KernelArguments ka = new();
ka.ExecutionSettings =  new Dictionary<string, PromptExecutionSettings>()
    {
        ["default"] = new OpenAIPromptExecutionSettings()
        {
            MaxTokens = 1000,
            Temperature = 0,
            ModelId = "gpt4o",
            ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions,
        }
    };

var result = await kernel.InvokePromptAsync($"I want to extract text transcription from video file {videoFile}", ka); 

#!markdown

Result is now a simple FunctionResult that in turns contains the textual answer.

#!csharp

Console.WriteLine(result);
