#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

#r "nuget: Microsoft.Extensions.Logging"
#r "nuget: Microsoft.SemanticKernel"
#r "nuget: Microsoft.Extensions.Logging.Console"
#r "nuget: Microsoft.Extensions.Logging.Debug"
#r "nuget: Microsoft.Extensions.Http"
#r "nuget: Microsoft.SemanticKernel.PromptTemplates.Handlebars"

#!import ../dotenv.cs
#!import ../pythonWrapper.cs
#!import ../commonFullDi.cs
#!import plugins/AudioVideoPlugin/AudioVideo.cs

#!csharp

var kernelBuilder = Common.ConfigureKernelBuilder(enableLogging: true, enableDumpProvider: false);

var audioVideoPluginConfig = new AudioVideoPluginConfig("setting");
Common.Services.AddSingleton(audioVideoPluginConfig);  

kernelBuilder
    .Plugins
        .AddFromType<AudioVideoPlugin>("AudioVideoPlugin");

#!csharp

var kernel = Common.Resolve<Kernel>();

#!csharp

using Microsoft.SemanticKernel.Connectors.OpenAI;
OpenAIPromptExecutionSettings openAIPromptExecutionSettings = new()
{
    ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions,
    Temperature = 0,
};

#!csharp

using Microsoft.SemanticKernel.ChatCompletion;
var chatCompletionService = Common.Resolve<IChatCompletionService>();

#!csharp

//you can alwasy get the interface from kernel, but from global DI is better
var chatCompletionService = kernel.GetRequiredService<IChatCompletionService>();
var videoFile = @"c:\temp\sk\ssh.mp4";
ChatHistory chatMessages = new();
chatMessages.AddUserMessage($@"I want to extract audio from video file {videoFile}");
var results = await chatCompletionService.GetChatMessageContentsAsync(
    chatMessages,
    executionSettings: openAIPromptExecutionSettings,
    kernel: kernel);

foreach (var result in results)
{
    Console.WriteLine(result);
}

#!csharp

Console.WriteLine(results.First());
