#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"http","languageName":"HTTP"},{"name":"value"}]}}

#!csharp

#!import ../dotenv.cs
#r "nuget: Microsoft.SemanticKernel"
#r "nuget: Microsoft.Extensions.Logging"
#r "nuget: Microsoft.Extensions.Logging.Console"
#r "nuget: Microsoft.Extensions.Logging.Debug"

#!markdown

We have an experimental overload of AddOpenAIChatCompletion that accepts a httpclient and also an Uri for endpoint. This allow us to specify any other url for OpenAI API, actually allowing us to redirect to local LM Studio instance

#!csharp

// Now configure kernel memory
using Microsoft.SemanticKernel;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Net.Http;

// Create and register a custom HttpClient with the redirect handler
var redirectUrl = "http://localhost:1234/v1"; // Target URL for redirection

// Register the HttpClient in the KernelBuilder's services
var kernelBuilder = Kernel.CreateBuilder();
//kernelBuilder.Services.AddSingleton<HttpClient>(httpClient);

kernelBuilder.Services.AddLogging(l => l
    .SetMinimumLevel(LogLevel.Warning)
    .AddConsole()
    .AddDebug()
);
var httpClient = new HttpClient { Timeout = TimeSpan.FromMinutes(5) };

#pragma warning disable SKEXP0010 // Suppress the warning for evaluation purposes
kernelBuilder.AddOpenAIChatCompletion(
    modelId: "gpt4o", 
    apiKey: null,
    endpoint: new Uri(redirectUrl),
    httpClient: httpClient); 
#pragma warning restore CS0618 // Re-enable the warning

#!csharp

//if your model is multimodal you can send images 
using Microsoft.SemanticKernel.ChatCompletion;

var kernel = kernelBuilder.Build();
var chatCompletionService = kernel.GetRequiredService<IChatCompletionService>();

#!csharp

using Microsoft.SemanticKernel.Connectors.OpenAI;

var oaiSettings = new OpenAIPromptExecutionSettings()
{
    MaxTokens = 4000,
    Temperature = 0,
};

ChatHistory chatMessages = new();
chatMessages.AddSystemMessage("you are an expert technician that will extract information from images");

// var image = "/Users/gianmariaricci/Desktop/test.png";
var image = "s:/Downloads/dreame.jpg";
var bytes = System.IO.File.ReadAllBytes(image);
var imageData = new ReadOnlyMemory<byte>(bytes);
var message = new ChatMessageContentItemCollection
{
    new TextContent(@"This is a page of a pdf document that represents a technical manual, please describe the page, identify images and generate a markdown that explain with great detail what is in this page.."),
    new ImageContent(imageData, "image/png")
};
chatMessages.AddUserMessage(message);
var result = await chatCompletionService.GetChatMessageContentAsync(chatMessages, oaiSettings);  
Console.WriteLine(result);  
