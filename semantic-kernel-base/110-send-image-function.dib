#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

#!import ../dotenv.cs
#r "nuget: Microsoft.SemanticKernel, 1.32.0"
#r "nuget: Microsoft.Extensions.Logging, 8.*"
#r "nuget: Microsoft.Extensions.Logging.Console, 8.*"
#r "nuget: Microsoft.Extensions.Logging.Debug, 8.*"

#!markdown

We will use simple configuration to just access openai api

#!csharp

using Microsoft.SemanticKernel;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

var kernelBuilder = Kernel.CreateBuilder();
kernelBuilder.Services.AddLogging(l => l
    .SetMinimumLevel(LogLevel.Trace)
    .AddConsole()
    .AddDebug()
);

kernelBuilder.Services.AddAzureOpenAIChatCompletion(
    "GPT4omini", //"GPT35_2",//"GPT42",
    Dotenv.Get("OPENAI_API_BASE"),
    Dotenv.Get("OPENAI_API_KEY"),
    serviceId: "default",
    modelId: "gpt4o");

#!csharp

using Microsoft.SemanticKernel.ChatCompletion;

var kernel = kernelBuilder.Build();
var chatCompletionService = kernel.GetRequiredService<IChatCompletionService>();

#!csharp

using Microsoft.SemanticKernel.Connectors.OpenAI;
using System.ComponentModel;

//Define the function
var describeLambda = [Description("Describe image")] (
    [Description("Short description")] string shortDescription,
    [Description("Long description")] string longDescription
) =>
{
   return;
};

var function = KernelFunctionFactory.CreateFromMethod(describeLambda, "describe");
var openAIFunction = function.Metadata.ToOpenAIFunction();

#!csharp

var settings = new OpenAIPromptExecutionSettings()
{
        MaxTokens = 1000,
        Temperature = 0,
        ModelId = "gpt4o",
        ToolCallBehavior = ToolCallBehavior.RequireFunction(openAIFunction, autoInvoke: false),
};

ChatHistory chatMessages = new();
chatMessages.AddSystemMessage("you are an expert technician that will extract information from images");

var image = @"A:\Develop\github\ai-notebooks\kernel-memory-extraction\output2\figures\fileoutpart18.png";
var bytes = System.IO.File.ReadAllBytes(image);
var imageData = new ReadOnlyMemory<byte>(bytes);
 var message = new ChatMessageContentItemCollection
{
    new TextContent("Extract a short description for this image then a longer markdown description"),
    new ImageContent(imageData, "image/png")
};

chatMessages.AddUserMessage(message);
var result = await chatCompletionService.GetChatMessageContentAsync(chatMessages, settings);    

#!csharp

var mc = result as OpenAIChatMessageContent;
var toolCall = mc.ToolCalls.Single();
Console.WriteLine(toolCall.FunctionArguments);
