#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"sql","languageName":"SQL"},{"name":"value"}]}}

#!csharp

#!import ../dotenv.cs
#r "nuget: Microsoft.SemanticKernel, 1.32.0"
#r "nuget: Microsoft.Extensions.Logging"
#r "nuget: Microsoft.Extensions.Logging.Console"
#r "nuget: Microsoft.Extensions.Logging.Debug"
#r "nuget: PdfPig.Rendering.Skia"
#r "nuget: System.Drawing.Common"

#!csharp

using System.IO;

// var pdfFile = "/Users/gianmariaricci/Downloads/catalogo.pdf";
// var outputDir = "/Users/gianmariaricci/Downloads/catalogo";

var pdfFile = "C:\\temp\\manualeDreame2.pdf";

var outputDir = Path.Combine(Environment.CurrentDirectory, "localvision");

//if the directory exists delete then recreate again
if (Directory.Exists(outputDir))
{
    Directory.Delete(outputDir, true);
}
Directory.CreateDirectory(outputDir);

#!csharp

using UglyToad.PdfPig.Graphics.Colors;
using UglyToad.PdfPig;
using UglyToad.PdfPig.Rendering.Skia;
using SkiaSharp;

using (var document = PdfDocument.Open(pdfFile))
{
    var baseFileName = Path.Combine(outputDir, Path.GetFileNameWithoutExtension(pdfFile));

	document.AddSkiaPageFactory(); // Same as document.AddPageFactory<SKPicture, SkiaPageFactory>()

	// 8, 29, 35, 36, 40
	var pagesToPrint = new int[] { 6, 7, 8, 9  };
	foreach (var pageNumber in pagesToPrint)
	{
		using (var fs = new FileStream($"{baseFileName}_{pageNumber}.png", FileMode.Create))
		using (var ms = document.GetPageAsPng(pageNumber, 2, RGBColor.White))
		{
			ms.WriteTo(fs);
		}

		using var textFile = File.CreateText($"{baseFileName}_{pageNumber}.txt");
		foreach (var word in document.GetPage(pageNumber).GetWords())
		{
			textFile.Write(word.Text);
			textFile.Write(" ");
		}
	}
}

#!csharp

// now I can cycle for all images, then pass the images to a multimodal 
// model to extract text.
using Microsoft.SemanticKernel;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.SemanticKernel.ChatCompletion;
using System.Net.Http;

var kernelBuilder = Kernel.CreateBuilder();
kernelBuilder.Services.AddLogging(l => l
    .SetMinimumLevel(LogLevel.Trace)
    .AddConsole()
    .AddDebug()
);

var redirectUrl = "http://10.0.0.39:1234/v1";

#!csharp

var httpClient = new HttpClient { Timeout = TimeSpan.FromMinutes(5) };

void RegisterLocalModel(string modelId) 
{
    #pragma warning disable SKEXP0010 // Suppress the warning for evaluation purposes
    kernelBuilder.AddOpenAIChatCompletion(
        modelId: modelId, 
        apiKey: null,
        endpoint: new Uri(redirectUrl),
        httpClient: httpClient,
        serviceId: modelId); 
    #pragma warning restore CS0618 // Re-enable the warning
}

//now register gpt4o mini
kernelBuilder.Services.AddAzureOpenAIChatCompletion(
    "GPT4omini", //"GPT35_2",//"GPT42",
    Dotenv.Get("OPENAI_API_BASE"),
    Dotenv.Get("OPENAI_API_KEY"),
    serviceId: "gpt4omini",
    modelId: "gpt4omini");

//now register gpt4o mini
kernelBuilder.Services.AddAzureOpenAIChatCompletion(
    "gpt4o", //"GPT35_2",//"GPT42",
    Dotenv.Get("OPENAI_API_BASE"),
    Dotenv.Get("OPENAI_API_KEY"),
    serviceId: "gpt4o",
    modelId: "gpt4o");

//register local model
// string [] localModels = [
//     "gemma-3-12b-it"
//    ,"gemma-3-4b-it"
// ];
string [] localModels = [
    "gemma-3-4b-it"
];
foreach (var model in localModels)
{
    RegisterLocalModel(model);
}

string [] allModels = localModels.Concat(["gpt4omini", "gpt4o" ]).ToArray();

var kernel = kernelBuilder.Build();

// now create a dictionary with the IChatCompletionService and the id of local model
var allModelsDictionary = new Dictionary<string, IChatCompletionService>();
foreach (var model in allModels)
{
    var ccs = kernel.GetRequiredService<IChatCompletionService>(model);
    allModelsDictionary.Add(model, ccs);
}

#!csharp

void WriteToFile(string filePath, string content)
{
    if (File.Exists(filePath))
    {
        File.Delete(filePath);
    }
    //if the first and last lines startw with three backticks, remove them
    var lines = content.Split('\n');
    var lineNum = 0;

    if (lines.Length == 0) return;

    if (lines[0].StartsWith("```"))
    {
        lineNum = 1;
    }
    //open out file as stream
    using var outFile = new StreamWriter(filePath);
    for (int i = lineNum; i < lines.Length - 1; i++)
    {
        outFile.WriteLine(lines[i]);
    }
    //Verify if the last line should be written
    if (!lines[^1].StartsWith("```"))
    {
        outFile.WriteLine(lines[^1]);
    }
}

#!csharp

using Microsoft.SemanticKernel.Connectors.OpenAI;
using System.Threading;

async Task ExtractTextFromImage(string fileName) 
{
    var oaiSettings = new OpenAIPromptExecutionSettings()
    {
        MaxTokens = 4000,
        Temperature = 0,
    };


    ChatHistory chatMessages = new();
    chatMessages.AddSystemMessage("You are an assistant that helps extracting text from catalog");

    var bytes = System.IO.File.ReadAllBytes(fileName);
    var imageData = new ReadOnlyMemory<byte>(bytes);
    var message = new ChatMessageContentItemCollection
    {
        // new TextContent(@"You need to extract all text from the image in markdown format. 
        //     Try to extract table if the layout is tabular and preserve much semantic as possible.
        //     Be sure to extract all text from the image."),

        new TextContent(@"Describe the image in the most accurate way possible, after the description include all the text that you are able to read on the image."),

//         new TextContent(@"You need to extract all text from the image in markdown format. 
// Try to extract table if the layout is tabular and preserve much semantic as possible.
// Be sure to extract all text from the image."),
//         new TextContent(@"Please describe the image in the most detailed way possible.
// Identify all sub images and describe each of them separately.
// This is a page that describe a product manual so focus on the instructions contained in the image and
// the information that are useful to the user to use the product"),
//         new TextContent(@"This is the image of a product, you need to extract a series of Question and Answers to be used by a call center.
// Focus on all possible answer that the images can answer. If there are sub images, please focus on each
// sub image separately.
// Separate each question and answer from the next one with a series of dashes like ----."),
//         new TextContent(@"This is a page from a manual of a product.
// You will extract a series of Question and Answers to be used by a call center, and be sure
// to use only information that are present in the images.
// Asnwer in plain text, put the question on the first line and separate each question and answer from the next one with a series of dashes like ----."),
        new ImageContent(imageData, "image/png")
    };
    chatMessages.AddUserMessage(message);

    //now use all completion service in allModelsDictionary
    foreach (var model in allModelsDictionary)
    {
        Console.WriteLine($"Processing {fileName} with model {model.Key}");
        var ccs = model.Value;
        var modelId = model.Key;
        var result = await ccs.GetChatMessageContentAsync(chatMessages, oaiSettings);
        var outputFile = Path.Combine(outputDir, Path.GetFileNameWithoutExtension(fileName) + $"_{modelId}.md");
        WriteToFile(outputFile, result.ToString());
        Console.WriteLine($"File {fileName} processed. Output saved to {outputFile}");
    }
}

#!csharp

var files = Directory.GetFiles(outputDir, "*.png")
    .OrderBy(f => f);
foreach (var file in files)
{
    await ExtractTextFromImage(file);
}
