#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

#r "nuget: Microsoft.Extensions.DependencyInjection, 8.*"
#r "nuget: Microsoft.Extensions.Http, 8.*"
#r "nuget: DocumentFormat.OpenXml, 3.2.0"

#!csharp

using Microsoft.Extensions.DependencyInjection;
using System;
using System.Net.Http;
using System.IO;

var serviceCollection = new ServiceCollection();
serviceCollection.AddHttpClient();
var serviceProvider = serviceCollection.BuildServiceProvider();

var httpClient = serviceProvider.GetRequiredService<IHttpClientFactory>().CreateClient();

var outputFile = @"C:/temp/converted2.docx";
// if exists Delete
if (System.IO.File.Exists(outputFile))
{
    System.IO.File.Delete(outputFile);
}

var inputFile = @"C:/temp/manualedreame2.pdf";

var requestUri = "http://localhost:9999/api/conversion/convertpdf2word";
var inputstreamfile = new System.IO.FileStream(inputFile, System.IO.FileMode.Open, System.IO.FileAccess.Read);

Console.WriteLine("Sending request to convert PDF to DOCX");
var content = new StreamContent(inputstreamfile);

Console.WriteLine($"Sending request to {requestUri}...");
var response = await httpClient.PostAsync(requestUri, content);

Console.WriteLine("Status code: " + response.StatusCode);
if (response.IsSuccessStatusCode)
{
    Console.WriteLine("Request successful.");
}
else
{
    Console.WriteLine($"Request failed with status code: {response.StatusCode}");
}

if (File.Exists(outputFile))
{
    File.Delete(outputFile);
}

using (var output = new FileStream(outputFile, FileMode.Create))
{
    await response.Content.CopyToAsync(output);
}

#!csharp

using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Wordprocessing;
using System;

using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(outputFile, false))
{
    Body body = wordDoc.MainDocumentPart.Document.Body;
    foreach (var element in body.Elements())
    {
        if (element is Paragraph paragraph)
        {
            // take the first 80 char of the text
            var text = paragraph.InnerText;
            if (text.Length > 80)
            {
                text = text.Substring(0, 80);
            }
            if (string.IsNullOrWhiteSpace(text))
            {
                continue;
            }

            // Get the style if present
            var styleId = paragraph.ParagraphProperties?.ParagraphStyleId?.Val?.Value;
            var style = styleId != null ? $" (Style: {styleId})" : string.Empty;

            Console.WriteLine("para: " + text + style);
        }
        else if (element is Table)
        {
            Console.WriteLine("Table:");
            var tableMarkdown = new System.Text.StringBuilder();
            foreach (var row in ((Table)element).Elements<TableRow>())
            {
                var rowMarkdown = new System.Text.StringBuilder();
                foreach (var cell in row.Elements<TableCell>())
                {
                    rowMarkdown.Append("| " + cell.InnerText + " ");
                }
                rowMarkdown.Append("|");
                tableMarkdown.AppendLine(rowMarkdown.ToString());
            }
            Console.WriteLine(tableMarkdown.ToString());
        }
        else if (element is Drawing)
        {
            Console.WriteLine("Image:");
            var drawing = (Drawing)element;
            var blip = drawing.Descendants<DocumentFormat.OpenXml.Drawing.Blip>().FirstOrDefault();
            if (blip != null)
            {
                Console.WriteLine("Image ID: " + blip.Embed);
            }
        }
    }
}

#!csharp

// generate markdown file
using System.IO;

// if the directory exists, delete, then create 
var outputDirectory = Path.Combine(Environment.CurrentDirectory, "outputword");
if (Directory.Exists(outputDirectory))
{
    Directory.Delete(outputDirectory, true);
}
Directory.CreateDirectory(outputDirectory);

var markdownFile = Path.Combine(outputDirectory, "output.md");
using (var writer = new StreamWriter(markdownFile))
{
    using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(outputFile, false))
    {
        Body body = wordDoc.MainDocumentPart.Document.Body;
        foreach (var element in body.Elements())
        {
            if (element is Paragraph paragraph)
            {
                var text = paragraph.InnerText;
                if (string.IsNullOrWhiteSpace(text))
                {
                    continue;
                }

                var styleId = paragraph.ParagraphProperties?.ParagraphStyleId?.Val?.Value;
                string markdownPrefix = styleId?.ToLower() switch
                {
                    "heading1" => "# ",
                    "heading2" => "## ",
                    "heading3" => "### ",
                    _ => string.Empty
                };

                writer.WriteLine($"{markdownPrefix}{text}\n");
            }
            else if (element is Table)
            {
                var tableMarkdown = new System.Text.StringBuilder();
                bool isHeaderRow = true;
                foreach (var row in ((Table)element).Elements<TableRow>())
                {
                    var rowMarkdown = new System.Text.StringBuilder();
                    foreach (var cell in row.Elements<TableCell>())
                    {
                        rowMarkdown.Append("| " + cell.InnerText + " ");
                    }
                    rowMarkdown.Append("|");
                    tableMarkdown.AppendLine(rowMarkdown.ToString());

                    if (isHeaderRow)
                    {
                        var headerSeparator = new System.Text.StringBuilder();
                        foreach (var cell in row.Elements<TableCell>())
                        {
                            headerSeparator.Append("|---");
                        }
                        headerSeparator.Append("|");
                        tableMarkdown.AppendLine(headerSeparator.ToString());
                        isHeaderRow = false;
                    }
                }
                writer.WriteLine(tableMarkdown.ToString());
            }
            else if (element is Drawing)
            {
                writer.WriteLine("Image:");
                var drawing = (Drawing)element;
                var blip = drawing.Descendants<DocumentFormat.OpenXml.Drawing.Blip>().FirstOrDefault();
                if (blip != null)
                {
                    writer.WriteLine("Image ID: " + blip.Embed);
                }
            }
        }
    }
    Console.WriteLine($"Markdown file generated at {markdownFile}");
}
